#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Vehicle {
protected:
    string brand;
    int year;

public:
    Vehicle(const string& brand, int year) : brand(brand), year(year) {
        cout << "Создан транспортное средство: " << brand << ", Год: " << year << endl;
    }

    virtual void printInfo() const = 0;

    virtual ~Vehicle() {
        cout << "Уничтожено транспортное средство: " << brand << endl;
    }
};

class Car : public Vehicle {
private:
    int numberOfDoors;

public:
    Car(const string& brand, int year, int numberOfDoors)
        : Vehicle(brand, year), numberOfDoors(numberOfDoors) {
        cout << "Создан легковой автомобиль: " << brand << ", Год: " << year
             << ", Количество дверей: " << numberOfDoors << endl;
    }

    void printInfo() const override {
        cout << "Легковой автомобиль: " << brand << ", Год: " << year
             << ", Количество дверей: " << numberOfDoors << endl;
    }

    ~Car() {
        cout << "Уничтожен легковой автомобиль: " << brand << endl;
    }
};

class Bike : public Vehicle {
private:
    bool hasBasket;

public:
    Bike(const string& brand, int year, bool hasBasket)
        : Vehicle(brand, year), hasBasket(hasBasket) {
        cout << "Создан велосипед: " << brand << ", Год: " << year
             << ", Наличие корзины: " << (hasBasket ? "Да" : "Нет") << endl;
    }

    void printInfo() const override {
        cout << "Велосипед: " << brand << ", Год: " << year
             << ", Наличие корзины: " << (hasBasket ? "Да" : "Нет") << endl;
    }

    ~Bike() {
        cout << "Уничтожен велосипед: " << brand << endl;
    }
};

int main() {
    const int fleetSize = 4;
    Vehicle* fleet[fleetSize];

    fleet[0] = new Car("Toyota", 2020, 4);
    fleet[1] = new Bike("Giant", 2019, true);
    fleet[2] = new Car("Honda", 2021, 2);
    fleet[3] = new Bike("Trek", 2020, false);

    cout << "\nИнформация о транспортных средствах в автопарке:" << endl;
    for (int i = 0; i < fleetSize; ++i) {
        fleet[i]->printInfo();
    }

    for (int i = 0; i < fleetSize; ++i) {
        delete fleet[i];
    }
}
