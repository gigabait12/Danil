#include <iostream>
#include <vector>
#include <memory>
#include <cmath>

using namespace std;

class Shape {
protected:
    static int idCounter;
    int id;

public:
    Shape() : id(++idCounter) {}
    virtual double area() const = 0;
    virtual void printInfo() const = 0;
    virtual ~Shape() {}
    int getId() const { return id; }
};

int Shape::idCounter = 0;

class Circle : public Shape {
private:
    double radius;

public:
    Circle(double r) : radius(r) {}
    double area() const override {
        return M_PI * radius * radius;
    }
    void printInfo() const override {
        cout << "Circle ID: " << id << ", Radius: " << radius << ", Area: " << area() << endl;
    }
    ~Circle() {}
};

class Sphere : public Circle {
public:
    Sphere(double r) : Circle(r) {}
    double volume() const {
        return (4.0 / 3.0) * M_PI * pow(radius, 3);
    }
    void printInfo() const override {
        Circle::printInfo();
        cout << "Volume: " << volume() << endl;
    }
    ~Sphere() {}
};

class Rectangle : public Shape {
private:
    double width;
    double height;

public:
    Rectangle(double w, double h) : width(w), height(h) {}
    double area() const override {
        return width * height;
    }
    void printInfo() const override {
        cout << "Rectangle ID: " << id << ", Width: " << width << ", Height: " << height << ", Area: " << area() << endl;
    }
    ~Rectangle() {}
};

class Cuboid : public Rectangle {
public:
    Cuboid(double w, double h) : Rectangle(w, h) {}
    double volume() const {
        return area() * height;
    }
    void printInfo() const override {
        Rectangle::printInfo();
        cout << "Volume: " << volume() << endl;
    }
    ~Cuboid() {}
};

bool operator==(const Shape& a, const Shape& b) {
    return a.getId() == b.getId();
}

Shape& operator+(const Shape& a, const Shape& b) {
    return *(new Rectangle(a.area(), b.area()));
}

int main() {
    vector<shared_ptr<Shape>> shapes;
    int choice;

    do {
        cout << "\nМеню:\n";
        cout << "1. Добавить круг\n";
        cout << "2. Добавить сферу\n";
        cout << "3. Добавить прямоугольник\n";
        cout << "4. Добавить кубоид\n";
        cout << "5. Вывести информацию о фигурах\n";
        cout << "6. Завершить работу\n";
        cout << "Выберите пункт меню: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                double radius;
                cout << "Введите радиус круга: ";
                cin >> radius;
                shapes.push_back(make_shared<Circle>(radius));
                break;
            }
            case 2: {
                double radius;
                cout << "Введите радиус сферы: ";
                cin >> radius;
                shapes.push_back(make_shared<Sphere>(radius));
                break;
            }
            case 3: {
                double width, height;
                cout << "Введите ширину и высоту прямоугольника: ";
                cin >> width >> height;
                shapes.push_back(make_shared<Rectangle>(width, height));
                break;
            }
            case 4: {
                double width, height;
                cout << "Введите ширину и высоту кубоида: ";
                cin >> width >> height;
                shapes.push_back(make_shared<Cuboid>(width, height));
                break;
            }
            case 5: {
                for (const auto& shape : shapes) {
                    shape->printInfo();
                }
                break;
            }
            case 6:
                cout << "Завершение работы." << endl;
                break;
            default:
                cout << "Неверный выбор. Пожалуйста, попробуйте снова." << endl;
        }
    } while (choice != 6);
}
