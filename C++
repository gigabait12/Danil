1:
#include <iostream>
#include <limits>

using namespace std;

float celsiusToFahrenheit(float celsius) {
    return (celsius * 9.0 / 5.0) + 32.0;
}

float fahrenheitToCelsius(float fahrenheit) {
    return (fahrenheit - 32.0) * 5.0 / 9.0;
}

int main() {
    int choice;
    float temperature;

    do {
        cout << "\nМеню:\n";
        cout << "1. Перевести Цельсий в Фаренгейт\n";
        cout << "2. Перевести Фаренгейт в Цельсий\n";
        cout << "3. Завершить работу\n";
        cout << "Выберите пункт меню: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Введите температуру в градусах Цельсия: ";
                cin >> temperature;
                cout << "Температура в Фаренгейтах: " << celsiusToFahrenheit(temperature) << endl;
                cout << "Температура в Фаренгейтах (целое): " << static_cast<int>(celsiusToFahrenheit(temperature)) << endl;
                break;
            case 2:
                cout << "Введите температуру в Фаренгейтах: ";
                cin >> temperature;
                cout << "Температура в Цельсиях: " << fahrenheitToCelsius(temperature) << endl;
                cout << "Температура в Цельсиях (целое): " << static_cast<int>(fahrenheitToCelsius(temperature)) << endl;
                break;
            case 3:
                cout << "Завершение работы." << endl;
                break;
            default:
                cout << "Неверный выбор. Пожалуйста, попробуйте снова." << endl;
        }
    } while (choice != 3);
}
2:
#include <iostream>
#include <vector>
#include <memory>
#include <string>

using namespace std;

class Vehicle {
protected:
    string brand;
    int year;

public:
    Vehicle(const string& brand, int year) : brand(brand), year(year) {}
    virtual void printInfo() const = 0; // Чисто виртуальная функция
    virtual ~Vehicle() {}
};

class Car : public Vehicle {
private:
    int numberOfDoors;

public:
    Car(const string& brand, int year, int numberOfDoors)
        : Vehicle(brand, year), numberOfDoors(numberOfDoors) {}

    void printInfo() const override {
        cout << "Легковой автомобиль: " << brand << ", Год: " << year
             << ", Количество дверей: " << numberOfDoors << endl;
    }
};

class Truck : public Vehicle {
private:
    int loadCapacity;

public:
    Truck(const string& brand, int year, int loadCapacity)
        : Vehicle(brand, year), loadCapacity(loadCapacity) {}

    void printInfo() const override {
        cout << "Грузовой автомобиль: " << brand << ", Год: " << year
             << ", Грузоподъемность: " << loadCapacity << " кг" << endl;
    }
};

int main() {
    vector<shared_ptr<Vehicle>> fleet;

    fleet.push_back(make_shared<Car>("Toyota", 2020, 4));
    fleet.push_back(make_shared<Truck>("Volvo", 2018, 10000));
    fleet.push_back(make_shared<Car>("Honda", 2021, 2));
    fleet.push_back(make_shared<Truck>("Mercedes", 2019, 15000));

    cout << "Информация об автомобилях в автопарке:" << endl;
    for (const auto& vehicle : fleet) {
        vehicle->printInfo();
    }
}
